import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Window, WindowProps } from "../components/Window";
import { File, FileProps } from "../components/File";
import { createRef, RefObject, useEffect, useState } from "react";
import ReadMe from "../components/files/ReadMe";
import { Task, TaskProps } from "../components/Task";

interface Element {
  window: WindowProps;
  file: FileProps;
  task: TaskProps;
}

export default function Home() {
  const readmeWindowRef: RefObject<Window> = createRef();
  const readmeTaskRef: RefObject<Task> = createRef();
  const readme2WindowRef: RefObject<Window> = createRef();
  const readme2TaskRef: RefObject<Task> = createRef();

  const README: Element = {
    window: {
      title: "README",
      icon: "txt-file-icon.svg",
      children: <ReadMe />,
      taskRef: readmeTaskRef,
    },
    file: {
      name: "README",
      icon: "txt-file-icon.svg",
      windowRef: readmeWindowRef,
    },
    task: {
      name: "README",
      icon: "txt-file-icon.svg",
      windowRef: readmeWindowRef,
    },
  };

  const README2: Element = {
    window: {
      title: "README2",
      icon: "txt-file-icon.svg",
      children: <ReadMe />,
      taskRef: readme2TaskRef,
    },
    file: {
      name: "README2",
      icon: "txt-file-icon.svg",
      windowRef: readme2WindowRef,
    },
    task: {
      name: "README2",
      icon: "txt-file-icon.svg",
      windowRef: readme2WindowRef,
    },
  };

  const [elements, setElements] = useState<Element[]>([README, README2]);
  const [menuOpen, setMenuOpen] = useState<boolean>(false);
  // const [menuType, setMenuType] = useState<number>(0);
  const [menuPoint, setMenuPoint] = useState<{ x: number; y: number }>({
    x: 0,
    y: 0,
  });

  const handleWindowZ = (index: number) => {
    elements.forEach((el) => {
      el.file.windowRef.current?.decrementZIndex();
    });

    elements[index].file.windowRef.current?.setZIndex(99 + elements.length);
  };

  const handleContextMenu = (event: React.MouseEvent<HTMLElement>) => {
    event.preventDefault();

    setMenuPoint({
      x:
        event.pageX < window.innerWidth - (window.innerWidth / 100) * 10
          ? event.pageX
          : event.pageX - window.innerWidth / 10,
      y:
        event.pageY < window.innerHeight - (window.innerHeight / 100) * 10
          ? event.pageY
          : event.pageY - window.innerHeight / 10,
    });

    setMenuOpen(true);
  };

  const addElement = (
    fileName?: string,
    iconPath?: string,
    windowName?: string,
    children?: React.ReactNode
  ) => {
    if (!fileName) fileName = "FILE";
    if (!iconPath) iconPath = "txt-file-icon.svg";
    if (!windowName) windowName = fileName;

    const windowRef: RefObject<Window> = createRef();
    const taskRef: RefObject<Task> = createRef();

    setElements([
      ...elements,
      {
        window: {
          title: windowName,
          icon: iconPath,
          children: children ? children : <></>,
          taskRef: taskRef,
        },
        file: {
          name: fileName,
          icon: iconPath,
          windowRef: windowRef,
        },
        task: {
          name: fileName,
          icon: iconPath,
          windowRef: windowRef,
        },
      },
    ]);
  };

  useEffect(() => {
    const handleClick = () => {
      if (menuOpen) {
        setMenuOpen(false);
      }
    };

    document.addEventListener("keydown", handleClick);
    document.addEventListener("click", handleClick);
    return () => {
      document.removeEventListener("keydown", handleClick);
      document.removeEventListener("click", handleClick);
    };
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Welcome!</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={styles.main}
        onContextMenu={(e) => {
          handleContextMenu(e);
        }}
      >
        {menuOpen && (
          <ul
            className={styles.context_menu}
            style={{ top: menuPoint.y, left: menuPoint.x }}
          >
            <li>Context Menu</li>
            <li>Something</li>
            <li>Context Menu</li>
          </ul>
        )}
        <div className={styles.desktop}>
          <div className={styles.desktop_icons}>
            {elements
              ? elements!.map((element) => (
                  <File
                    windowRef={element.file.windowRef}
                    name={element.file.name}
                    icon={element.window.icon}
                  />
                ))
              : null}
          </div>
          <div className={styles.desktop_windows}>
            {elements
              ? elements!.map((element) => (
                  <Window
                    title={element.window.title}
                    icon={element.window.icon}
                    taskRef={element.window.taskRef}
                    ref={element.file.windowRef}
                    zIndex={100 + elements.indexOf(element)}
                    onWindowGrab={handleWindowZ}
                  >
                    {element.window.children}
                  </Window>
                ))
              : null}
          </div>
        </div>
        <div className={styles.taskbar}>
          {elements
            ? elements!.map((element) => (
                <Task
                  windowRef={element.file.windowRef}
                  name={element.file.name}
                  icon={element.window.icon}
                  ref={element.window.taskRef}
                />
              ))
            : null}
        </div>
      </main>
    </div>
  );
}
